#include <stdio.h>

#define MAX_FRAMES 10
#define MAX_PAGES 30

int findOptimal(int pages[], int frames[], int n, int f, int index) {
    int farthest = index, pos = -1;
    for (int i = 0; i < f; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                break;
            }
        }
        if (j == n) return i;
    }
    return (pos == -1) ? 0 : pos;
}

int main() {
    int frames[MAX_FRAMES], pages[MAX_PAGES], n, f, page_faults = 0;
    
    printf("Enter number of pages: ");
    scanf("%d", &n);
    printf("Enter reference string: ");
    for (int i = 0; i < n; i++) scanf("%d", &pages[i]);
    printf("Enter number of frames: ");
    scanf("%d", &f);
    
    for (int i = 0; i < f; i++) frames[i] = -1;
    
    printf("\nPage Reference String | Frames\n");
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < f; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        
        if (!found) {
            int pos = (i < f) ? i : findOptimal(pages, frames, n, f, i);
            frames[pos] = pages[i];
            page_faults++;
        }
        
        printf("%d | ", pages[i]);
        for (int j = 0; j < f; j++) frames[j] != -1 ? printf("%d ", frames[j]) : printf("- ");
        printf("\n");
    }
    
    printf("\nTotal Page Faults: %d\n", page_faults);
    return 0;
}
